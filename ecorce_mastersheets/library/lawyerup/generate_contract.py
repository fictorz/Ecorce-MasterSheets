from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from io import BytesIO

import os
from datetime import date

# extract model
import google.generativeai as genai

def generate_redacted_contract(party1_name, party2_name, complaint_user1, complaint_user2, mediation_text=""):
    """Generates the redacted contract using Gemini 2.0 Flash and creates a styled PDF."""

    # to pass model or expert. genai.configure(api_key=GOOGLE_API_KEY)
    genai.configure(api_key = os.getenv("GEMINI_API_KEY"))
    model = genai.GenerativeModel('gemini-2.0-flash')

    # begin of code

    today = date.today().strftime("%B %d, %Y") # Format today's date

    contract_template = f"""
    **DISPUTE RESOLUTION AGREEMENT**

    **Date:** {today}

    **Parties:**

    **Party 1:** {party1_name}

    **Party 2:** {party2_name}

    **Background:**

    This agreement is made to resolve a dispute between Party 1 and Party 2. The parties have engaged in mediation to reach a mutually acceptable resolution.

    **Agreement:**

    1.  **Resolution Clauses:**

        [RESOLUTION_CLAUSES_GO_HERE]

    2.  **Entire Agreement:**

        This Agreement constitutes the entire agreement between the parties with respect to the subject matter hereof and supersedes all prior or contemporaneous communications and proposals, whether oral or written, between the parties.

    3.  **Governing Law:**

        This Agreement shall be governed by and construed in accordance with the laws of [State/Jurisdiction].

    4.  **Signatures:**

        IN WITNESS WHEREOF, the parties have executed this Agreement as of the date first written above.

        _________________________
        {party1_name} (Party 1)

        _________________________
        {party2_name} (Party 2)
    """

    prompt_text = f"""
    You are an experienced contract drafter specializing in dispute resolution.
    Please draft the "Resolution Clauses" section (and ONLY that section) for a final resolution contract based on the user complaints provided below.
    Focus on creating clear, concise, and legally sound clauses that address the complaints and provide a balanced resolution.
    Act as a neutral mediator and propose fair solutions.

    **User Complaints:**
    User 1 Complaint: {complaint_user1}
    User 2 Complaint: {complaint_user2}

    **Desired Output:** (Only the Resolution Clauses section, formatted for insertion into the contract template)
    1.  Clause 1: ... (Detailed resolution for complaint 1)
    2.  Clause 2: ... (Detailed resolution for complaint 2)
    ... (Further clauses as needed to resolve all issues)
    """

    response = model.generate_content(prompt_text)
    resolution_clauses_gemini = response.text

    print("\n--- Resolution Clauses (Gemini 2.0 Flash) ---")
    print(resolution_clauses_gemini)
    print("\n**Note:** These clauses are generated by Gemini 2.0 Flash based on the provided complaints and a more detailed prompt.")
    print("**Important:** Review the entire contract carefully and consider legal advice for real-world use.")

    # --- PDF Generation with ReportLab ---
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    styles = getSampleStyleSheet()
    normal_style = styles['Normal']
    heading_style = styles['Heading2']
    agreement_title_style = ParagraphStyle(
        'AgreementTitle',
        parent=styles['Heading1'],
        alignment=1, # TA_CENTER
        fontSize=16,
        spaceAfter=12
    )
    section_heading_style = ParagraphStyle(
        'SectionHeading',
        parent=styles['Heading3'],
        spaceBefore=6,
        spaceAfter=6,
        fontName='Helvetica-Bold'
    )
    party_info_style = ParagraphStyle(
        'PartyInfo',
        parent=normal_style,
        spaceBefore=3,
        spaceAfter=3
    )
    clause_style = ParagraphStyle(
        'Clause',
        parent=normal_style,
        spaceBefore=6,
        spaceAfter=6,
        bulletFontName='Helvetica-Bold' # For numbered lists to stand out
    )
    signature_style = ParagraphStyle(
        'Signature',
        parent=normal_style,
        alignment=1, # TA_CENTER
        spaceBefore=20,
        spaceAfter=5
    )


    story = []

    # --- Contract Content using Paragraphs and Styles ---
    story.append(Paragraph("DISPUTE RESOLUTION AGREEMENT", agreement_title_style))
    story.append(Spacer(1, 0.2*inch)) # Space after title

    story.append(Paragraph(f"Date: {today}", normal_style))
    story.append(Spacer(1, 0.2*inch))

    story.append(Paragraph("Parties:", section_heading_style))
    story.append(Paragraph(f"Party 1: {party1_name}", party_info_style))
    story.append(Paragraph(f"Party 2: {party2_name}", party_info_style))
    story.append(Spacer(1, 0.2*inch))

    story.append(Paragraph("Background:", section_heading_style))
    background_text = "This agreement is made to resolve a dispute between Party 1 and Party 2. The parties have engaged in mediation to reach a mutually acceptable resolution."
    story.append(Paragraph(background_text, normal_style))
    story.append(Spacer(1, 0.2*inch))

    story.append(Paragraph("Agreement:", section_heading_style))

    story.append(Paragraph("1. Resolution Clauses:", section_heading_style))

    # Process and add Resolution Clauses (from Gemini) with Paragraphs
    clause_lines = resolution_clauses_gemini.strip().split('\n') # Split into lines and remove extra whitespace
    for line in clause_lines:
        if line.strip(): # Ignore empty lines
            story.append(Paragraph(line.strip(), clause_style, bulletText=u'\u2022')) # Use bullet points for clauses


    story.append(Paragraph("2. Entire Agreement:", section_heading_style))
    entire_agreement_text = "This Agreement constitutes the entire agreement between the parties with respect to the subject matter hereof and supersedes all prior or contemporaneous communications and proposals, whether oral or written, between the parties."
    story.append(Paragraph(entire_agreement_text, normal_style))
    story.append(Spacer(1, 0.2*inch))

    story.append(Paragraph("3. Governing Law:", section_heading_style))
    governing_law_text = "This Agreement shall be governed by and construed in accordance with the laws of [State/Jurisdiction]."
    story.append(Paragraph(governing_law_text, normal_style))
    story.append(Spacer(1, 0.2*inch))


    story.append(Paragraph("4. Signatures:", section_heading_style))
    story.append(Paragraph("IN WITNESS WHEREOF, the parties have executed this Agreement as of the date first written above.", normal_style))
    story.append(Spacer(1, 0.4*inch)) # More space before signatures
    story.append(Paragraph("_________________________", signature_style))
    story.append(Paragraph(f"{party1_name} (Party 1)", signature_style))
    story.append(Spacer(1, 0.2*inch))
    story.append(Paragraph("_________________________", signature_style))
    story.append(Paragraph(f"{party2_name} (Party 2)", signature_style))


    doc.build(story) # Build the PDF document from the story
    buffer.seek(0)
    return buffer
